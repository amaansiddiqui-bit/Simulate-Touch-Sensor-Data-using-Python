# -*- coding: utf-8 -*-
"""Simulate Touch Sensor Data using Python.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZpNns4dpioayySRKUPdj889mnlldHV-l
"""

import random
import time

def generate_touch_data(simulation_duration_seconds=60):
    start_time = time.time()
    end_time = start_time + simulation_duration_seconds

    log_file_path = "touch_sensor_log.txt"

    # Open the log file for writing
    with open(log_file_path, 'w') as log_file:
        log_file.write("Timestamp,Event\n")

        while time.time() < end_time:
            # Simulate a random event (touched or released)
            event = random.choice(["Touched", "Released"])

            # Get the current timestamp
            timestamp = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime())

            # Log the event with timestamp
            log_entry = f"{timestamp},{event}\n"
            log_file.write(log_entry)

            # Simulate a time delay between events
            time.sleep(random.uniform(0.1, 1.5))

if __name__ == "__main__":
    simulation_duration_seconds = 300  # Adjust the duration as needed
    generate_touch_data(simulation_duration_seconds)

"""Explanation:

The generate_touch_data function takes an optional argument simulation_duration_seconds, which sets the duration of the touch sensor data simulation. The default duration is 60 seconds.

The script generates random touch events ("Touched") and releases ("Released") within the specified duration. Each event is accompanied by a timestamp.

The data is logged to a file named "touch_sensor_log.txt" with a header row indicating the columns ("Timestamp" and "Event").

The time.sleep function is used to simulate a time delay between events, ensuring the generated data appears more realistic.

In the __main__ section, the script is set to run for a duration of 300 seconds (adjust as needed). You can run this script to simulate touch sensor data, and the generated log can be used for further analysis or testing.

Remember to adjust the simulation_duration_seconds based on your requirements.

"""

